"use client";
import React, { useState } from "react";
import { Card } from "./ui/card";
import { Button } from "./ui/button";
import Editor from "@monaco-editor/react";

const problem = {
  id: "p1",
  name: "Two Sum",
  difficulty: "Easy",
  tags: ["array", "hash-table"],
  statement:
    "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Each input will have exactly one solution.",
  testCases: [
    { input: "[2,7,11,15], 9", output: "[0,1]" },
    { input: "[3,2,4], 6", output: "[1,2]" },
    { input: "[3,3], 6", output: "[0,1]" },
  ],
  hint: "Use a hash map to store visited numbers and check for complement while iterating.",
};

const initialCode = `# Problem: ${problem.name}
# ${problem.statement}

def two_sum(nums, target):
    # Write your solution here
    pass
`;

export default function ProblemEditor() {
  const [code, setCode] = useState(initialCode);
  const [showHint, setShowHint] = useState(false);
  const [isRunning, setIsRunning] = useState(false);
  const [results, setResults] = useState<string | null>(null);
  const [testStatuses, setTestStatuses] = useState<number[]>([]); // 0 = ready, 1 = pass, 2 = fail

  const runCode = async () => {
    setIsRunning(true);
    setResults(null);
    setTestStatuses(problem.testCases.map(() => 0));
    await new Promise((res) => setTimeout(res, 800));
    const statuses = problem.testCases.map((_, idx) => (idx === 0 ? 1 : 0));
    setTestStatuses(statuses);
    setResults(`${statuses.filter(s => s === 1).length}/${problem.testCases.length} tests passed`);
    setIsRunning(false);
  };

  return (
    <div className="min-h-screen bg-[#0A1929] text-slate-100">
      {/* Top Navigation */}
      <div className="h-14 bg-[#0A1929] border-b border-[#1E3A57] px-6 flex items-center justify-between">
        <div className="flex items-center space-x-8">
          <div className="flex items-center space-x-2">
            <div className="text-teal-400 text-2xl">â¬¢</div>
            <span className="text-xl font-semibold bg-gradient-to-r from-teal-400 to-blue-400 text-transparent bg-clip-text">
              CodeCraft
            </span>
          </div>
          <nav className="flex space-x-6">
            <a href="#" className="text-teal-400 font-medium">Practice</a>
            <a href="#" className="text-slate-400 hover:text-teal-400 transition-colors">Learn</a>
            <a href="#" className="text-slate-400 hover:text-teal-400 transition-colors">Compete</a>
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <Button 
            className="bg-[#1E3A57] hover:bg-[#254B6F] text-teal-400 px-4 py-2 rounded-md transition-all duration-200"
            onClick={() => alert('Settings coming soon')}
          >
            Settings
          </Button>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="max-w-8xl mx-auto px-6 py-4">
        {/* Problem Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-semibold text-slate-100">Problem Editor</h1>
            <div className="flex space-x-2">
              <span className="px-3 py-1 bg-[#1E3A57] text-teal-400 rounded-full text-sm border border-[#254B6F]">
                Python
              </span>
              <span className="px-3 py-1 bg-[#1E3A57] text-teal-400 rounded-full text-sm border border-[#254B6F]">
                Algorithm
              </span>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Button className="bg-teal-500 hover:bg-teal-400 text-slate-900 px-4 py-2 rounded-md font-medium transition-all duration-200">
              New Problem
            </Button>
          </div>
        </div>

        {/* Problem Content Grid */}
        <div className="grid grid-cols-12 gap-6">
          {/* Left: Problem Description */}
          <div className="col-span-4">
            <Card className="bg-[#0F2942] border border-[#1E3A57] rounded-xl overflow-hidden">
              <div className="border-b border-[#1E3A57] p-6">
                <div className="flex items-start justify-between">
                  <div>
                    <h2 className="text-xl font-semibold text-slate-100">{problem.name}</h2>
                    <div className="flex items-center gap-2 mt-3">
                      <span className="px-2.5 py-1 text-xs bg-teal-400/10 text-teal-400 rounded-full border border-teal-400/20">
                        {problem.difficulty}
                      </span>
                      {problem.tags.map((t) => (
                        <span key={t} className="text-xs px-2.5 py-1 bg-blue-400/10 text-blue-400 rounded-full border border-blue-400/20">
                          {t}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <div className="p-6">
                <div className="prose prose-invert max-w-none">
                  <p className="text-slate-300 text-sm leading-relaxed">
                    {problem.statement}
                  </p>
                </div>

                <div className="mt-6">
                  <h3 className="text-sm font-semibold text-slate-200 mb-3">Examples</h3>
                  <div className="space-y-4">
                    {problem.testCases.map((tc, i) => (
                      <div key={i} className="bg-[#0A1929] border border-[#1E3A57] rounded-lg overflow-hidden">
                        <div className="px-4 py-2 bg-[#1E3A57]/30 border-b border-[#1E3A57] text-xs font-medium text-slate-300">
                          Example {i + 1}
                        </div>
                        <div className="p-4 space-y-3">
                          <div>
                            <div className="text-xs font-medium text-teal-400 mb-1">Input</div>
                            <div className="font-mono text-sm text-slate-300 bg-[#0A1929] p-2 rounded border border-[#1E3A57]">
                              {tc.input}
                            </div>
                          </div>
                          <div>
                            <div className="text-xs font-medium text-teal-400 mb-1">Output</div>
                            <div className="font-mono text-sm text-slate-300 bg-[#0A1929] p-2 rounded border border-[#1E3A57]">
                              {tc.output}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="mt-6">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-semibold text-slate-200">Hint</h4>
                    <Button 
                      onClick={() => setShowHint((s) => !s)}
                      className="text-xs bg-[#1E3A57] hover:bg-[#254B6F] text-teal-400 px-3 py-1.5 rounded-md transition-colors"
                    >
                      {showHint ? 'Hide' : 'Show'} Hint
                    </Button>
                  </div>
                  {showHint && (
                    <div className="mt-3 p-4 bg-[#0A1929] border border-[#1E3A57] rounded-lg">
                      <p className="text-sm text-slate-300">{problem.hint}</p>
                    </div>
                  )}
                </div>
              </div>
            </Card>
          </div>

          {/* Right: Editor + Results */}
          <div className="col-span-8 flex flex-col space-y-6">
            {/* Code Editor */}
            <Card className="bg-[#0F2942] border border-[#1E3A57] rounded-xl overflow-hidden">
              <div className="border-b border-[#1E3A57] p-4 flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className="text-sm font-medium text-slate-200">Solution</span>
                  <span className="text-xs text-teal-400 bg-teal-400/10 px-2.5 py-1 rounded-full border border-teal-400/20">
                    Python
                  </span>
                </div>

                <div className="flex items-center gap-3">
                  <Button
                    onClick={runCode}
                    className={`px-4 py-2 rounded-md font-medium transition-all duration-200 ${
                      isRunning
                        ? 'bg-amber-500/20 text-amber-400 cursor-not-allowed'
                        : 'bg-teal-400 hover:bg-teal-300 text-slate-900'
                    }`}
                    disabled={isRunning}
                  >
                    {isRunning ? 'Running...' : 'Run Code'}
                  </Button>
                  <Button
                    className="px-4 py-2 bg-blue-500 hover:bg-blue-400 text-slate-900 rounded-md font-medium transition-all duration-200"
                    onClick={() => alert('Submit functionality coming soon')}
                  >
                    Submit
                  </Button>
                </div>
              </div>

              <div className="h-[600px]">
                <Editor
                  height="100%"
                  defaultLanguage="python"
                  value={code}
                  theme="vs-dark"
                  options={{
                    fontSize: 14,
                    fontFamily: 'JetBrains Mono, monospace',
                    minimap: { enabled: false },
                    scrollBeyondLastLine: false,
                    lineNumbers: "on",
                    renderLineHighlight: "line",
                    matchBrackets: "always",
                    autoClosingBrackets: "always",
                    rulers: [80],
                    guides: { indentation: true },
                    bracketPairColorization: { enabled: true },
                    "semanticHighlighting.enabled": true,
                  }}
                  onChange={(v) => setCode(v || "")}
                />
              </div>
            </Card>

            {/* Test Results */}
            <Card className="bg-[#0F2942] border border-[#1E3A57] rounded-xl overflow-hidden">
              <div className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h4 className="text-sm font-semibold text-slate-200">Test Results</h4>
                    <p className="text-xs text-slate-400 mt-1">Local execution feedback</p>
                  </div>
                  <div className="text-sm font-medium text-slate-300">{results ?? 'Ready to run'}</div>
                </div>

                <div className="grid grid-cols-3 gap-3">
                  {problem.testCases.map((tc, i) => {
                    const s = testStatuses[i] ?? 0;
                    const label = s === 0 ? 'Ready' : s === 1 ? 'Passed' : 'Failed';
                    const bg = s === 0 
                      ? 'bg-[#1E3A57] text-slate-300' 
                      : s === 1 
                        ? 'bg-teal-400/10 text-teal-400 border-teal-400/20' 
                        : 'bg-rose-500/10 text-rose-400 border-rose-400/20';
                    return (
                      <div key={i} className={`p-2 rounded-lg border ${bg} text-sm font-medium text-center transition-colors duration-200`}>
                        {label}
                      </div>
                    );
                  })}
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
